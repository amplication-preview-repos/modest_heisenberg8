/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Costo as PrismaCosto,
  Producto as PrismaProducto,
} from "@prisma/client";

export class CostoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CostoCountArgs, "select">): Promise<number> {
    return this.prisma.costo.count(args);
  }

  async costos(args: Prisma.CostoFindManyArgs): Promise<PrismaCosto[]> {
    return this.prisma.costo.findMany(args);
  }
  async costo(args: Prisma.CostoFindUniqueArgs): Promise<PrismaCosto | null> {
    return this.prisma.costo.findUnique(args);
  }
  async createCosto(args: Prisma.CostoCreateArgs): Promise<PrismaCosto> {
    return this.prisma.costo.create(args);
  }
  async updateCosto(args: Prisma.CostoUpdateArgs): Promise<PrismaCosto> {
    return this.prisma.costo.update(args);
  }
  async deleteCosto(args: Prisma.CostoDeleteArgs): Promise<PrismaCosto> {
    return this.prisma.costo.delete(args);
  }

  async getProducto(parentId: string): Promise<PrismaProducto | null> {
    return this.prisma.costo
      .findUnique({
        where: { id: parentId },
      })
      .producto();
  }
}
