/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CostoService } from "../costo.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CostoCreateInput } from "./CostoCreateInput";
import { Costo } from "./Costo";
import { CostoFindManyArgs } from "./CostoFindManyArgs";
import { CostoWhereUniqueInput } from "./CostoWhereUniqueInput";
import { CostoUpdateInput } from "./CostoUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CostoControllerBase {
  constructor(
    protected readonly service: CostoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Costo })
  @nestAccessControl.UseRoles({
    resource: "Costo",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCosto(@common.Body() data: CostoCreateInput): Promise<Costo> {
    return await this.service.createCosto({
      data: {
        ...data,

        producto: data.producto
          ? {
              connect: data.producto,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        monto: true,
        fecha: true,
        tipoDeCosto: true,

        producto: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Costo] })
  @ApiNestedQuery(CostoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Costo",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async costos(@common.Req() request: Request): Promise<Costo[]> {
    const args = plainToClass(CostoFindManyArgs, request.query);
    return this.service.costos({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        monto: true,
        fecha: true,
        tipoDeCosto: true,

        producto: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Costo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Costo",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async costo(
    @common.Param() params: CostoWhereUniqueInput
  ): Promise<Costo | null> {
    const result = await this.service.costo({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        monto: true,
        fecha: true,
        tipoDeCosto: true,

        producto: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Costo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Costo",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCosto(
    @common.Param() params: CostoWhereUniqueInput,
    @common.Body() data: CostoUpdateInput
  ): Promise<Costo | null> {
    try {
      return await this.service.updateCosto({
        where: params,
        data: {
          ...data,

          producto: data.producto
            ? {
                connect: data.producto,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          monto: true,
          fecha: true,
          tipoDeCosto: true,

          producto: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Costo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Costo",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCosto(
    @common.Param() params: CostoWhereUniqueInput
  ): Promise<Costo | null> {
    try {
      return await this.service.deleteCosto({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          monto: true,
          fecha: true,
          tipoDeCosto: true,

          producto: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
