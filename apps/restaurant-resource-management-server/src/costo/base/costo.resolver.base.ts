/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Costo } from "./Costo";
import { CostoCountArgs } from "./CostoCountArgs";
import { CostoFindManyArgs } from "./CostoFindManyArgs";
import { CostoFindUniqueArgs } from "./CostoFindUniqueArgs";
import { CreateCostoArgs } from "./CreateCostoArgs";
import { UpdateCostoArgs } from "./UpdateCostoArgs";
import { DeleteCostoArgs } from "./DeleteCostoArgs";
import { Producto } from "../../producto/base/Producto";
import { CostoService } from "../costo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Costo)
export class CostoResolverBase {
  constructor(
    protected readonly service: CostoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Costo",
    action: "read",
    possession: "any",
  })
  async _costosMeta(
    @graphql.Args() args: CostoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Costo])
  @nestAccessControl.UseRoles({
    resource: "Costo",
    action: "read",
    possession: "any",
  })
  async costos(@graphql.Args() args: CostoFindManyArgs): Promise<Costo[]> {
    return this.service.costos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Costo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Costo",
    action: "read",
    possession: "own",
  })
  async costo(
    @graphql.Args() args: CostoFindUniqueArgs
  ): Promise<Costo | null> {
    const result = await this.service.costo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Costo)
  @nestAccessControl.UseRoles({
    resource: "Costo",
    action: "create",
    possession: "any",
  })
  async createCosto(@graphql.Args() args: CreateCostoArgs): Promise<Costo> {
    return await this.service.createCosto({
      ...args,
      data: {
        ...args.data,

        producto: args.data.producto
          ? {
              connect: args.data.producto,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Costo)
  @nestAccessControl.UseRoles({
    resource: "Costo",
    action: "update",
    possession: "any",
  })
  async updateCosto(
    @graphql.Args() args: UpdateCostoArgs
  ): Promise<Costo | null> {
    try {
      return await this.service.updateCosto({
        ...args,
        data: {
          ...args.data,

          producto: args.data.producto
            ? {
                connect: args.data.producto,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Costo)
  @nestAccessControl.UseRoles({
    resource: "Costo",
    action: "delete",
    possession: "any",
  })
  async deleteCosto(
    @graphql.Args() args: DeleteCostoArgs
  ): Promise<Costo | null> {
    try {
      return await this.service.deleteCosto(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Producto, {
    nullable: true,
    name: "producto",
  })
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "read",
    possession: "any",
  })
  async getProducto(@graphql.Parent() parent: Costo): Promise<Producto | null> {
    const result = await this.service.getProducto(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
