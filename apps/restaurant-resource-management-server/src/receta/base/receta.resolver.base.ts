/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Receta } from "./Receta";
import { RecetaCountArgs } from "./RecetaCountArgs";
import { RecetaFindManyArgs } from "./RecetaFindManyArgs";
import { RecetaFindUniqueArgs } from "./RecetaFindUniqueArgs";
import { CreateRecetaArgs } from "./CreateRecetaArgs";
import { UpdateRecetaArgs } from "./UpdateRecetaArgs";
import { DeleteRecetaArgs } from "./DeleteRecetaArgs";
import { Producto } from "../../producto/base/Producto";
import { MateriaPrima } from "../../materiaPrima/base/MateriaPrima";
import { RecetaService } from "../receta.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Receta)
export class RecetaResolverBase {
  constructor(
    protected readonly service: RecetaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Receta",
    action: "read",
    possession: "any",
  })
  async _recetasMeta(
    @graphql.Args() args: RecetaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Receta])
  @nestAccessControl.UseRoles({
    resource: "Receta",
    action: "read",
    possession: "any",
  })
  async recetas(@graphql.Args() args: RecetaFindManyArgs): Promise<Receta[]> {
    return this.service.recetas(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Receta, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Receta",
    action: "read",
    possession: "own",
  })
  async receta(
    @graphql.Args() args: RecetaFindUniqueArgs
  ): Promise<Receta | null> {
    const result = await this.service.receta(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Receta)
  @nestAccessControl.UseRoles({
    resource: "Receta",
    action: "create",
    possession: "any",
  })
  async createReceta(@graphql.Args() args: CreateRecetaArgs): Promise<Receta> {
    return await this.service.createReceta({
      ...args,
      data: {
        ...args.data,

        producto: args.data.producto
          ? {
              connect: args.data.producto,
            }
          : undefined,

        materiaPrima: args.data.materiaPrima
          ? {
              connect: args.data.materiaPrima,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Receta)
  @nestAccessControl.UseRoles({
    resource: "Receta",
    action: "update",
    possession: "any",
  })
  async updateReceta(
    @graphql.Args() args: UpdateRecetaArgs
  ): Promise<Receta | null> {
    try {
      return await this.service.updateReceta({
        ...args,
        data: {
          ...args.data,

          producto: args.data.producto
            ? {
                connect: args.data.producto,
              }
            : undefined,

          materiaPrima: args.data.materiaPrima
            ? {
                connect: args.data.materiaPrima,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Receta)
  @nestAccessControl.UseRoles({
    resource: "Receta",
    action: "delete",
    possession: "any",
  })
  async deleteReceta(
    @graphql.Args() args: DeleteRecetaArgs
  ): Promise<Receta | null> {
    try {
      return await this.service.deleteReceta(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Producto, {
    nullable: true,
    name: "producto",
  })
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "read",
    possession: "any",
  })
  async getProducto(
    @graphql.Parent() parent: Receta
  ): Promise<Producto | null> {
    const result = await this.service.getProducto(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MateriaPrima, {
    nullable: true,
    name: "materiaPrima",
  })
  @nestAccessControl.UseRoles({
    resource: "MateriaPrima",
    action: "read",
    possession: "any",
  })
  async getMateriaPrima(
    @graphql.Parent() parent: Receta
  ): Promise<MateriaPrima | null> {
    const result = await this.service.getMateriaPrima(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
