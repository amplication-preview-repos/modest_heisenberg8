/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Producto as PrismaProducto,
  Costo as PrismaCosto,
  Venta as PrismaVenta,
  Receta as PrismaReceta,
} from "@prisma/client";

export class ProductoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProductoCountArgs, "select">): Promise<number> {
    return this.prisma.producto.count(args);
  }

  async productos(
    args: Prisma.ProductoFindManyArgs
  ): Promise<PrismaProducto[]> {
    return this.prisma.producto.findMany(args);
  }
  async producto(
    args: Prisma.ProductoFindUniqueArgs
  ): Promise<PrismaProducto | null> {
    return this.prisma.producto.findUnique(args);
  }
  async createProducto(
    args: Prisma.ProductoCreateArgs
  ): Promise<PrismaProducto> {
    return this.prisma.producto.create(args);
  }
  async updateProducto(
    args: Prisma.ProductoUpdateArgs
  ): Promise<PrismaProducto> {
    return this.prisma.producto.update(args);
  }
  async deleteProducto(
    args: Prisma.ProductoDeleteArgs
  ): Promise<PrismaProducto> {
    return this.prisma.producto.delete(args);
  }

  async findCostos(
    parentId: string,
    args: Prisma.CostoFindManyArgs
  ): Promise<PrismaCosto[]> {
    return this.prisma.producto
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .costos(args);
  }

  async findVentas(
    parentId: string,
    args: Prisma.VentaFindManyArgs
  ): Promise<PrismaVenta[]> {
    return this.prisma.producto
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ventas(args);
  }

  async findRecetas(
    parentId: string,
    args: Prisma.RecetaFindManyArgs
  ): Promise<PrismaReceta[]> {
    return this.prisma.producto
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recetas(args);
  }
}
