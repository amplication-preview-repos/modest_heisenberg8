/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  IsDate,
  MaxLength,
  IsOptional,
  IsNumber,
  Min,
  Max,
  ValidateNested,
} from "class-validator";

import { Type } from "class-transformer";
import { Costo } from "../../costo/base/Costo";
import { Venta } from "../../venta/base/Venta";
import { Receta } from "../../receta/base/Receta";

@ObjectType()
class Producto {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nombre!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  descripcion!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  precioVenta!: number | null;

  @ApiProperty({
    required: false,
    type: () => [Costo],
  })
  @ValidateNested()
  @Type(() => Costo)
  @IsOptional()
  costos?: Array<Costo>;

  @ApiProperty({
    required: false,
    type: () => [Venta],
  })
  @ValidateNested()
  @Type(() => Venta)
  @IsOptional()
  ventas?: Array<Venta>;

  @ApiProperty({
    required: false,
    type: () => [Receta],
  })
  @ValidateNested()
  @Type(() => Receta)
  @IsOptional()
  recetas?: Array<Receta>;
}

export { Producto as Producto };
