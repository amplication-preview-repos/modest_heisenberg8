/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ProductoService } from "../producto.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProductoCreateInput } from "./ProductoCreateInput";
import { Producto } from "./Producto";
import { ProductoFindManyArgs } from "./ProductoFindManyArgs";
import { ProductoWhereUniqueInput } from "./ProductoWhereUniqueInput";
import { ProductoUpdateInput } from "./ProductoUpdateInput";
import { CostoFindManyArgs } from "../../costo/base/CostoFindManyArgs";
import { Costo } from "../../costo/base/Costo";
import { CostoWhereUniqueInput } from "../../costo/base/CostoWhereUniqueInput";
import { VentaFindManyArgs } from "../../venta/base/VentaFindManyArgs";
import { Venta } from "../../venta/base/Venta";
import { VentaWhereUniqueInput } from "../../venta/base/VentaWhereUniqueInput";
import { RecetaFindManyArgs } from "../../receta/base/RecetaFindManyArgs";
import { Receta } from "../../receta/base/Receta";
import { RecetaWhereUniqueInput } from "../../receta/base/RecetaWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProductoControllerBase {
  constructor(
    protected readonly service: ProductoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Producto })
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createProducto(
    @common.Body() data: ProductoCreateInput
  ): Promise<Producto> {
    return await this.service.createProducto({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nombre: true,
        descripcion: true,
        precioVenta: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Producto] })
  @ApiNestedQuery(ProductoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async productos(@common.Req() request: Request): Promise<Producto[]> {
    const args = plainToClass(ProductoFindManyArgs, request.query);
    return this.service.productos({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nombre: true,
        descripcion: true,
        precioVenta: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Producto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async producto(
    @common.Param() params: ProductoWhereUniqueInput
  ): Promise<Producto | null> {
    const result = await this.service.producto({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nombre: true,
        descripcion: true,
        precioVenta: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Producto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateProducto(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() data: ProductoUpdateInput
  ): Promise<Producto | null> {
    try {
      return await this.service.updateProducto({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nombre: true,
          descripcion: true,
          precioVenta: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Producto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteProducto(
    @common.Param() params: ProductoWhereUniqueInput
  ): Promise<Producto | null> {
    try {
      return await this.service.deleteProducto({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nombre: true,
          descripcion: true,
          precioVenta: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/costos")
  @ApiNestedQuery(CostoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Costo",
    action: "read",
    possession: "any",
  })
  async findCostos(
    @common.Req() request: Request,
    @common.Param() params: ProductoWhereUniqueInput
  ): Promise<Costo[]> {
    const query = plainToClass(CostoFindManyArgs, request.query);
    const results = await this.service.findCostos(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        monto: true,
        fecha: true,
        tipoDeCosto: true,

        producto: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/costos")
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "update",
    possession: "any",
  })
  async connectCostos(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() body: CostoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      costos: {
        connect: body,
      },
    };
    await this.service.updateProducto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/costos")
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "update",
    possession: "any",
  })
  async updateCostos(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() body: CostoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      costos: {
        set: body,
      },
    };
    await this.service.updateProducto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/costos")
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "update",
    possession: "any",
  })
  async disconnectCostos(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() body: CostoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      costos: {
        disconnect: body,
      },
    };
    await this.service.updateProducto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ventas")
  @ApiNestedQuery(VentaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Venta",
    action: "read",
    possession: "any",
  })
  async findVentas(
    @common.Req() request: Request,
    @common.Param() params: ProductoWhereUniqueInput
  ): Promise<Venta[]> {
    const query = plainToClass(VentaFindManyArgs, request.query);
    const results = await this.service.findVentas(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fecha: true,
        monto: true,
        cantidad: true,

        producto: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ventas")
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "update",
    possession: "any",
  })
  async connectVentas(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() body: VentaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ventas: {
        connect: body,
      },
    };
    await this.service.updateProducto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ventas")
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "update",
    possession: "any",
  })
  async updateVentas(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() body: VentaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ventas: {
        set: body,
      },
    };
    await this.service.updateProducto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ventas")
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "update",
    possession: "any",
  })
  async disconnectVentas(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() body: VentaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ventas: {
        disconnect: body,
      },
    };
    await this.service.updateProducto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/recetas")
  @ApiNestedQuery(RecetaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Receta",
    action: "read",
    possession: "any",
  })
  async findRecetas(
    @common.Req() request: Request,
    @common.Param() params: ProductoWhereUniqueInput
  ): Promise<Receta[]> {
    const query = plainToClass(RecetaFindManyArgs, request.query);
    const results = await this.service.findRecetas(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        cantidadNecesaria: true,

        producto: {
          select: {
            id: true,
          },
        },

        materiaPrima: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recetas")
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "update",
    possession: "any",
  })
  async connectRecetas(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() body: RecetaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recetas: {
        connect: body,
      },
    };
    await this.service.updateProducto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recetas")
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "update",
    possession: "any",
  })
  async updateRecetas(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() body: RecetaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recetas: {
        set: body,
      },
    };
    await this.service.updateProducto({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recetas")
  @nestAccessControl.UseRoles({
    resource: "Producto",
    action: "update",
    possession: "any",
  })
  async disconnectRecetas(
    @common.Param() params: ProductoWhereUniqueInput,
    @common.Body() body: RecetaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recetas: {
        disconnect: body,
      },
    };
    await this.service.updateProducto({
      where: params,
      data,
      select: { id: true },
    });
  }
}
