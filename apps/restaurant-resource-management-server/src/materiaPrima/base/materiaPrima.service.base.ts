/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MateriaPrima as PrismaMateriaPrima,
  Receta as PrismaReceta,
} from "@prisma/client";
import { GetCostoActualInput } from "../GetCostoActualInput";

export class MateriaPrimaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MateriaPrimaCountArgs, "select">
  ): Promise<number> {
    return this.prisma.materiaPrima.count(args);
  }

  async materiaPrimas(
    args: Prisma.MateriaPrimaFindManyArgs
  ): Promise<PrismaMateriaPrima[]> {
    return this.prisma.materiaPrima.findMany(args);
  }
  async materiaPrima(
    args: Prisma.MateriaPrimaFindUniqueArgs
  ): Promise<PrismaMateriaPrima | null> {
    return this.prisma.materiaPrima.findUnique(args);
  }
  async createMateriaPrima(
    args: Prisma.MateriaPrimaCreateArgs
  ): Promise<PrismaMateriaPrima> {
    return this.prisma.materiaPrima.create(args);
  }
  async updateMateriaPrima(
    args: Prisma.MateriaPrimaUpdateArgs
  ): Promise<PrismaMateriaPrima> {
    return this.prisma.materiaPrima.update(args);
  }
  async deleteMateriaPrima(
    args: Prisma.MateriaPrimaDeleteArgs
  ): Promise<PrismaMateriaPrima> {
    return this.prisma.materiaPrima.delete(args);
  }

  async findRecetas(
    parentId: string,
    args: Prisma.RecetaFindManyArgs
  ): Promise<PrismaReceta[]> {
    return this.prisma.materiaPrima
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recetas(args);
  }
  async GetCostoActual(args: GetCostoActualInput): Promise<number> {
    throw new Error("Not implemented");
  }
}
