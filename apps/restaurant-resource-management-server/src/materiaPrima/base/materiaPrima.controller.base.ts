/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MateriaPrimaService } from "../materiaPrima.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MateriaPrimaCreateInput } from "./MateriaPrimaCreateInput";
import { MateriaPrima } from "./MateriaPrima";
import { MateriaPrimaFindManyArgs } from "./MateriaPrimaFindManyArgs";
import { MateriaPrimaWhereUniqueInput } from "./MateriaPrimaWhereUniqueInput";
import { MateriaPrimaUpdateInput } from "./MateriaPrimaUpdateInput";
import { RecetaFindManyArgs } from "../../receta/base/RecetaFindManyArgs";
import { Receta } from "../../receta/base/Receta";
import { RecetaWhereUniqueInput } from "../../receta/base/RecetaWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MateriaPrimaControllerBase {
  constructor(
    protected readonly service: MateriaPrimaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MateriaPrima })
  @nestAccessControl.UseRoles({
    resource: "MateriaPrima",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMateriaPrima(
    @common.Body() data: MateriaPrimaCreateInput
  ): Promise<MateriaPrima> {
    return await this.service.createMateriaPrima({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nombre: true,
        descripcion: true,
        cantidad: true,
        unidad: true,
        costoUnitario: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MateriaPrima] })
  @ApiNestedQuery(MateriaPrimaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MateriaPrima",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async materiaPrimas(@common.Req() request: Request): Promise<MateriaPrima[]> {
    const args = plainToClass(MateriaPrimaFindManyArgs, request.query);
    return this.service.materiaPrimas({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nombre: true,
        descripcion: true,
        cantidad: true,
        unidad: true,
        costoUnitario: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MateriaPrima })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MateriaPrima",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async materiaPrima(
    @common.Param() params: MateriaPrimaWhereUniqueInput
  ): Promise<MateriaPrima | null> {
    const result = await this.service.materiaPrima({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nombre: true,
        descripcion: true,
        cantidad: true,
        unidad: true,
        costoUnitario: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MateriaPrima })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MateriaPrima",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMateriaPrima(
    @common.Param() params: MateriaPrimaWhereUniqueInput,
    @common.Body() data: MateriaPrimaUpdateInput
  ): Promise<MateriaPrima | null> {
    try {
      return await this.service.updateMateriaPrima({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nombre: true,
          descripcion: true,
          cantidad: true,
          unidad: true,
          costoUnitario: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MateriaPrima })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MateriaPrima",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMateriaPrima(
    @common.Param() params: MateriaPrimaWhereUniqueInput
  ): Promise<MateriaPrima | null> {
    try {
      return await this.service.deleteMateriaPrima({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nombre: true,
          descripcion: true,
          cantidad: true,
          unidad: true,
          costoUnitario: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/recetas")
  @ApiNestedQuery(RecetaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Receta",
    action: "read",
    possession: "any",
  })
  async findRecetas(
    @common.Req() request: Request,
    @common.Param() params: MateriaPrimaWhereUniqueInput
  ): Promise<Receta[]> {
    const query = plainToClass(RecetaFindManyArgs, request.query);
    const results = await this.service.findRecetas(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        cantidadNecesaria: true,

        producto: {
          select: {
            id: true,
          },
        },

        materiaPrima: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recetas")
  @nestAccessControl.UseRoles({
    resource: "MateriaPrima",
    action: "update",
    possession: "any",
  })
  async connectRecetas(
    @common.Param() params: MateriaPrimaWhereUniqueInput,
    @common.Body() body: RecetaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recetas: {
        connect: body,
      },
    };
    await this.service.updateMateriaPrima({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recetas")
  @nestAccessControl.UseRoles({
    resource: "MateriaPrima",
    action: "update",
    possession: "any",
  })
  async updateRecetas(
    @common.Param() params: MateriaPrimaWhereUniqueInput,
    @common.Body() body: RecetaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recetas: {
        set: body,
      },
    };
    await this.service.updateMateriaPrima({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recetas")
  @nestAccessControl.UseRoles({
    resource: "MateriaPrima",
    action: "update",
    possession: "any",
  })
  async disconnectRecetas(
    @common.Param() params: MateriaPrimaWhereUniqueInput,
    @common.Body() body: RecetaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recetas: {
        disconnect: body,
      },
    };
    await this.service.updateMateriaPrima({
      where: params,
      data,
      select: { id: true },
    });
  }
}
